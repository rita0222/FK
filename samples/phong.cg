void main(float4 position: POSITION,
		float3 normal: NORMAL,
		uniform float4x4 model_view_proj_matrix,
		uniform float4x4 model_view_matrix,
		uniform float4 light_position,
		uniform float4 eye_position,
		uniform float k_diffuse,
		uniform float k_ambient,
		uniform float k_specular,
		uniform float shininess,
		out float4 position_of_vertex: POSITION,
		out float4 color_of_vertex: COLOR)
{
	float4 position_eye = mul(model_view_matrix, position);
	position_eye.xyz /= position_eye.w;
	
	float4 normal_eye = normalize(mul(model_view_matrix, float4(normal, 0.0)));
	float4 light_position_eye = mul(model_view_matrix, light_position);
	light_position_eye.xyz /= light_position_eye.w;
	
	float3 light_eye = normalize(light_position_eye.xyz - position_eye.xyz);
	float3 view_eye = normalize(eye_position.xyz - position_eye.xyz);
	float3 half_eye = normalize(light_eye + view_eye);
	
	float specular_reflectance = pow(max(dot(normal_eye.xyz, half_eye), 0.0),
			shininess) * k_specular;
	float diffuse_reflectance = max(dot(normal_eye.xyz, light_eye), 0.0);
	
	float reflectance = min(specular_reflectance + diffuse_reflectance +
			k_ambient, 1.0);
	
	position_of_vertex = mul(model_view_proj_matrix, position);
	color_of_vertex.rgb = reflectance;
	color_of_vertex.a = 1.0;
}
